"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _commonsApi = require("@verdaccio/commons-api");

var _memoryFs = _interopRequireDefault(require("memory-fs"));

var _streams = require("@verdaccio/streams");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fs = new _memoryFs.default();

class MemoryHandler {
  constructor(packageName, data, logger) {
    _defineProperty(this, "data", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "logger", void 0);

    // this is not need it
    this.data = data;
    this.name = packageName;
    this.logger = logger;
    this.path = '/';
  }

  updatePackage(pkgFileName, updateHandler, onWrite, transformPackage, onEnd) {
    const json = this._getStorage(pkgFileName);

    let pkg;

    try {
      pkg = (0, _utils.parsePackage)(json);
    } catch (err) {
      return onEnd(err);
    }

    updateHandler(pkg, err => {
      if (err) {
        return onEnd(err);
      }

      try {
        onWrite(pkgFileName, transformPackage(pkg), onEnd);
      } catch (err) {
        return onEnd((0, _commonsApi.getInternalError)('error on parse the metadata'));
      }
    });
  }

  deletePackage(pkgName, callback) {
    delete this.data[pkgName];
    return callback(null);
  }

  removePackage(callback) {
    return callback(null);
  }

  createPackage(name, value, cb) {
    this.savePackage(name, value, cb);
  }

  savePackage(name, value, cb) {
    try {
      const json = (0, _utils.stringifyPackage)(value);
      this.data[name] = json;
      return cb(null);
    } catch (err) {
      return cb((0, _commonsApi.getInternalError)(err.message));
    }
  }

  readPackage(name, cb) {
    const json = this._getStorage(name);

    const isJson = typeof json === 'undefined';

    try {
      return cb(isJson ? (0, _commonsApi.getNotFound)() : null, (0, _utils.parsePackage)(json));
    } catch (err) {
      return cb((0, _commonsApi.getNotFound)());
    }
  }

  writeTarball(name) {
    const uploadStream = new _streams.UploadTarball({});
    const temporalName = `/${name}`;
    process.nextTick(function () {
      fs.stat(temporalName, function (fileError, stats) {
        if (!fileError && stats) {
          return uploadStream.emit('error', (0, _commonsApi.getConflict)());
        }

        try {
          const file = fs.createWriteStream(temporalName);
          uploadStream.pipe(file);

          uploadStream.done = function () {
            const onEnd = function () {
              uploadStream.emit('success');
            };

            uploadStream.on('end', onEnd);
          };

          uploadStream.abort = function () {
            uploadStream.emit('error', (0, _commonsApi.getBadRequest)('transmision aborted'));
            file.end();
          };

          uploadStream.emit('open');
          return;
        } catch (err) {
          uploadStream.emit('error', err);
          return;
        }
      });
    });
    return uploadStream;
  }

  readTarball(name) {
    const pathName = `/${name}`;
    const readTarballStream = new _streams.ReadTarball({});
    process.nextTick(function () {
      fs.stat(pathName, function (fileError, stats) {
        if (fileError && !stats) {
          return readTarballStream.emit('error', (0, _commonsApi.getNotFound)());
        }

        try {
          const readStream = fs.createReadStream(pathName);
          const contentLength = fs.data[name] && fs.data[name].length || 0;
          readTarballStream.emit('content-length', contentLength);
          readTarballStream.emit('open');
          readStream.pipe(readTarballStream);
          readStream.on('error', error => {
            readTarballStream.emit('error', error);
          });

          readTarballStream.abort = function () {
            readStream.destroy((0, _commonsApi.getBadRequest)('read has been aborted'));
          };

          return;
        } catch (err) {
          readTarballStream.emit('error', err);
          return;
        }
      });
    });
    return readTarballStream;
  }

  _getStorage(name = '') {
    return this.data[name];
  }

}

var _default = MemoryHandler;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,