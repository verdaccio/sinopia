"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../../lib/constants");

var _utils = require("../../../../lib/utils");

var _authUtils = require("../../../../lib/auth-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth) {
  function buildProfile(name) {
    return {
      tfa: false,
      name,
      email: '',
      email_verified: false,
      created: '',
      updated: '',
      cidr_whitelist: null,
      fullname: ''
    };
  }

  route.get('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name) === false) {
      return next(buildProfile(req.remote_user.name));
    }

    res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
    return next({
      message: _constants.API_ERROR.MUST_BE_LOGGED
    });
  });
  route.post('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }

    const {
      password,
      tfa
    } = req.body;
    const {
      name
    } = req.remote_user;

    if (_lodash.default.isNil(password) === false) {
      if ((0, _authUtils.validatePassword)(password.new) === false) {
        /* eslint new-cap:off */
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.PASSWORD_SHORT()));
        /* eslint new-cap:off */
      }

      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNull(err) === false) {
          return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
        }

        if (isUpdated) {
          return next(buildProfile(req.remote_user.name));
        }

        return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
      });
    } else if (_lodash.default.isNil(tfa) === false) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.SERVICE_UNAVAILABLE, _constants.SUPPORT_ERRORS.TFA_DISABLED));
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, _constants.APP_ERROR.PROFILE_ERROR));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3YxL3Byb2ZpbGUudHMiXSwibmFtZXMiOlsicm91dGUiLCJhdXRoIiwiYnVpbGRQcm9maWxlIiwibmFtZSIsInRmYSIsImVtYWlsIiwiZW1haWxfdmVyaWZpZWQiLCJjcmVhdGVkIiwidXBkYXRlZCIsImNpZHJfd2hpdGVsaXN0IiwiZnVsbG5hbWUiLCJnZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiXyIsImlzTmlsIiwicmVtb3RlX3VzZXIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIlVOQVVUSE9SSVpFRCIsIm1lc3NhZ2UiLCJBUElfRVJST1IiLCJNVVNUX0JFX0xPR0dFRCIsInBvc3QiLCJwYXNzd29yZCIsImJvZHkiLCJuZXciLCJFcnJvckNvZGUiLCJnZXRDb2RlIiwiUEFTU1dPUkRfU0hPUlQiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZCIsImVyciIsImlzVXBkYXRlZCIsImlzTnVsbCIsImdldENvbmZsaWN0IiwiZ2V0SW50ZXJuYWxFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJTVVBQT1JUX0VSUk9SUyIsIlRGQV9ESVNBQkxFRCIsIklOVEVSTkFMX0VSUk9SIiwiQVBQX0VSUk9SIiwiUFJPRklMRV9FUlJPUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBZ0JlLGtCQUFTQSxLQUFULEVBQXdCQyxJQUF4QixFQUEyQztBQUN4RCxXQUFTQyxZQUFULENBQXNCQyxJQUF0QixFQUE2QztBQUMzQyxXQUFPO0FBQ0xDLE1BQUFBLEdBQUcsRUFBRSxLQURBO0FBRUxELE1BQUFBLElBRks7QUFHTEUsTUFBQUEsS0FBSyxFQUFFLEVBSEY7QUFJTEMsTUFBQUEsY0FBYyxFQUFFLEtBSlg7QUFLTEMsTUFBQUEsT0FBTyxFQUFFLEVBTEo7QUFNTEMsTUFBQUEsT0FBTyxFQUFFLEVBTko7QUFPTEMsTUFBQUEs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QUF1Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQVBJX0VSUk9SLCBBUFBfRVJST1IsIEhUVFBfU1RBVFVTLCBTVVBQT1JUX0VSUk9SUyB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCB7IHZhbGlkYXRlUGFzc3dvcmQgfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvYXV0aC11dGlscyc7XG5cbmltcG9ydCB7IFJlc3BvbnNlLCBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7ICROZXh0RnVuY3Rpb25WZXIsICRSZXF1ZXN0RXh0ZW5kLCBJQXV0aCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9maWxlIHtcbiAgdGZhOiBib29sZWFuO1xuICBuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGVtYWlsX3ZlcmlmaWVkOiBib29sZWFuO1xuICBjcmVhdGVkOiBzdHJpbmc7XG4gIHVwZGF0ZWQ6IHN0cmluZztcbiAgY2lkcl93aGl0ZWxpc3Q6IHN0cmluZ1tdIHwgbnVsbDtcbiAgZnVsbG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocm91dGU6IFJvdXRlciwgYXV0aDogSUF1dGgpOiB2b2lkIHtcbiAgZnVuY3Rpb24gYnVpbGRQcm9maWxlKG5hbWU6IHN0cmluZyk6IFByb2ZpbGUge1xuICAgIHJldHVybiB7XG4gICAgICB0ZmE6IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIGVtYWlsX3ZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIGNyZWF0ZWQ6ICcnLFxuICAgICAgdXBkYXRlZDogJycsXG4gICAgICBjaWRyX3doaXRlbGlzdDogbnVsbCxcbiAgICAgIGZ1bGxuYW1lOiAnJyxcbiAgICB9O1xuICB9XG5cbiAgcm91dGUuZ2V0KCcvLS9ucG0vdjEvdXNlcicsIGZ1bmN0aW9uKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBpZiAoXy5pc05pbChyZXEucmVtb3RlX3VzZXIubmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gbmV4dChidWlsZFByb2ZpbGUocmVxLnJlbW90ZV91c2VyLm5hbWUpKTtcbiAgICB9XG5cbiAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCk7XG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgbWVzc2FnZTogQVBJX0VSUk9SLk1VU1RfQkVfTE9HR0VELFxuICAgIH0pO1xuICB9KTtcblxuICByb3V0ZS5wb3N0KCcvLS9ucG0vdjEvdXNlcicsIGZ1bmN0aW9uKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBpZiAoXy5pc05pbChyZXEucmVtb3RlX3VzZXIubmFtZSkpIHtcbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVEKTtcbiAgICAgIHJldHVybiBuZXh0KHtcbiAgICAgICAgbWVzc2FnZTogQVBJX0VSUk9SLk1VU1RfQkVfTE9HR0VELFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBwYXNzd29yZCwgdGZhIH0gPSByZXEuYm9keTtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHJlcS5yZW1vdGVfdXNlcjtcblxuICAgIGlmIChfLmlzTmlsKHBhc3N3b3JkKSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmICh2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkLm5ldykgPT09IGZhbHNlKSB7XG4gICAgICAgIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQsIEFQSV9FUlJPUi5QQVNTV09SRF9TSE9SVCgpKSk7XG4gICAgICAgIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICAgICAgfVxuXG4gICAgICBhdXRoLmNoYW5nZVBhc3N3b3JkKFxuICAgICAgICBuYW1lLFxuICAgICAgICBwYXNzd29yZC5vbGQsXG4gICAgICAgIHBhc3N3b3JkLm5ldyxcbiAgICAgICAgKGVyciwgaXNVcGRhdGVkKTogJE5leHRGdW5jdGlvblZlciA9PiB7XG4gICAgICAgICAgaWYgKF8uaXNOdWxsKGVycikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShlcnIuc3RhdHVzLCBlcnIubWVzc2FnZSkgfHwgRXJyb3JDb2RlLmdldENvbmZsaWN0KGVyci5tZXNzYWdlKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzVXBkYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoYnVpbGRQcm9maWxlKHJlcS5yZW1vdGVfdXNlci5uYW1lKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRJbnRlcm5hbEVycm9yKEFQSV9FUlJPUi5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNOaWwodGZhKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLlNFUlZJQ0VfVU5BVkFJTEFCTEUsIFNVUFBPUlRfRVJST1JTLlRGQV9ESVNBQkxFRCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5JTlRFUk5BTF9FUlJPUiwgQVBQX0VSUk9SLlBST0ZJTEVfRVJST1IpKTtcbiAgICB9XG4gIH0pO1xufVxuIl19