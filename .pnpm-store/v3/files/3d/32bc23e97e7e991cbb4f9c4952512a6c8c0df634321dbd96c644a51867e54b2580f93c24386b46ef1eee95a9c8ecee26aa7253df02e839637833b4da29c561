"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = match;
exports.setSecurityWebHeaders = setSecurityWebHeaders;
exports.validateName = validateName;
exports.validatePackage = validatePackage;
exports.media = media;
exports.encodeScopePackage = encodeScopePackage;
exports.expectJson = expectJson;
exports.antiLoop = antiLoop;
exports.allow = allow;
exports.final = final;
exports.log = log;
exports.errorReportingMiddleware = errorReportingMiddleware;
exports.LOG_VERDACCIO_BYTES = exports.LOG_VERDACCIO_ERROR = exports.LOG_STATUS_MESSAGE = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("../lib/utils");

var _constants = require("../lib/constants");

var _cryptoUtils = require("../lib/crypto-utils");

var _logger = require("../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function match(regexp) {
  return function (req, res, next, value) {
    if (regexp.exec(value)) {
      next();
    } else {
      next('route');
    }
  };
}

function setSecurityWebHeaders(req, res, next) {
  // disable loading in frames (clickjacking, etc.)
  res.header(_constants.HEADERS.FRAMES_OPTIONS, 'deny'); // avoid stablish connections outside of domain

  res.header(_constants.HEADERS.CSP, "connect-src 'self'"); // https://stackoverflow.com/questions/18337630/what-is-x-content-type-options-nosniff

  res.header(_constants.HEADERS.CTO, 'nosniff'); // https://stackoverflow.com/questions/9090577/what-is-the-http-header-x-xss-protection

  res.header(_constants.HEADERS.XSS, '1; mode=block');
  next();
} // flow: express does not match properly
// flow info https://github.com/flowtype/flow-typed/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+express


function validateName(req, res, next, value, name) {
  if (value === '-') {
    // special case in couchdb usually
    next('route');
  } else if ((0, _utils.validateName)(value)) {
    next();
  } else {
    next(_utils.ErrorCode.getForbidden('invalid ' + name));
  }
} // flow: express does not match properly
// flow info https://github.com/flowtype/flow-typed/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+express


function validatePackage(req, res, next, value, name) {
  if (value === '-') {
    // special case in couchdb usually
    next('route');
  } else if ((0, _utils.validatePackage)(value)) {
    next();
  } else {
    next(_utils.ErrorCode.getForbidden('invalid ' + name));
  }
}

function media(expect) {
  return function (req, res, next) {
    if (req.headers[_constants.HEADER_TYPE.CONTENT_TYPE] !== expect) {
      next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNSUPPORTED_MEDIA, 'wrong content-type, expect: ' + expect + ', got: ' + req.headers[_constants.HEADER_TYPE.CONTENT_TYPE]));
    } else {
      next();
    }
  };
}

function encodeScopePackage(req, res, next) {
  if (req.url.indexOf('@') !== -1) {
    // e.g.: /@org/pkg/1.2.3 -> /@org%2Fpkg/1.2.3, /@org%2Fpkg/1.2.3 -> /@org%2Fpkg/1.2.3
    req.url = req.url.replace(/^(\/@[^\/%]+)\/(?!$)/, '$1%2F');
  }

  next();
}

function expectJson(req, res, next) {
  if (!(0, _utils.isObject)(req.body)) {
    return next(_utils.ErrorCode.getBadRequest("can't parse incoming json"));
  }

  next();
}

function antiLoop(config) {
  return function (req, res, next) {
    if (req.headers.via != null) {
      const arr = req.headers.via.split(',');

      for (let i = 0; i < arr.length; i++) {
        const m = arr[i].match(/\s*(\S+)\s+(\S+)/);

        if (m && m[2] === config.server_id) {
          return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.LOOP_DETECTED, 'loop detected'));
        }
      }
    }

    next();
  };
}

function allow(auth) {
  return function (action) {
    return function (req, res, next) {
      req.pause();
      const packageName = req.params.scope ? `@${req.params.scope}/${req.params.package}` : req.params.package;
      const packageVersion = req.params.filename ? (0, _utils.getVersionFromTarball)(req.params.filename) : undefined;
      const remote = req.remote_user;

      _logger.logger.trace({
        action,
        user: remote.name
      }, `[middleware/allow][@{action}] allow for @{user}`);

      auth['allow_' + action]({
        packageName,
        packageVersion
      }, remote, function (error, allowed) {
        req.resume();

        if (error) {
          next(error);
        } else if (allowed) {
          next();
        } else {
          // last plugin (that's our built-in one) returns either
          // cb(err) or cb(null, true), so this should never happen
          throw _utils.ErrorCode.getInternalError(_constants.API_ERROR.PLUGIN_ERROR);
        }
      });
    };
  };
}

function final(body, req, res, next) {
  if (res.statusCode === _constants.HTTP_STATUS.UNAUTHORIZED && !res.getHeader(_constants.HEADERS.WWW_AUTH)) {
    // they say it's required for 401, so...
    res.header(_constants.HEADERS.WWW_AUTH, `${_constants.TOKEN_BASIC}, ${_constants.TOKEN_BEARER}`);
  }

  try {
    if (_lodash.default.isString(body) || _lodash.default.isObject(body)) {
      if (!res.getHeader(_constants.HEADERS.CONTENT_TYPE)) {
        res.header(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON);
      }

      if (typeof body === 'object' && _lodash.default.isNil(body) === false) {
        if (typeof body.error === 'string') {
          res._verdaccio_error = body.error;
        }

        body = JSON.stringify(body, undefined, '  ') + '\n';
      } // don't send etags with errors


      if (!res.statusCode || res.statusCode >= _constants.HTTP_STATUS.OK && res.statusCode < _constants.HTTP_STATUS.MULTIPLE_CHOICES) {
        res.header(_constants.HEADERS.ETAG, '"' + (0, _cryptoUtils.stringToMD5)(body) + '"');
      }
    } else {// send(null), send(204), etc.
    }
  } catch (err) {
    // if verdaccio sends headers first, and then calls res.send()
    // as an error handler, we can't report error properly,
    // and should just close socket
    if (err.message.match(/set headers after they are sent/)) {
      if (_lodash.default.isNil(res.socket) === false) {
        res.socket.destroy();
      }

      return;
    }

    throw err;
  }

  res.send(body);
}

const LOG_STATUS_MESSAGE = "@{status}, user: @{user}(@{remoteIP}), req: '@{request.method} @{request.url}'";
exports.LOG_STATUS_MESSAGE = LOG_STATUS_MESSAGE;
const LOG_VERDACCIO_ERROR = `${LOG_STATUS_MESSAGE}, error: @{!error}`;
exports.LOG_VERDACCIO_ERROR = LOG_VERDACCIO_ERROR;
const LOG_VERDACCIO_BYTES = `${LOG_STATUS_MESSAGE}, bytes: @{bytes.in}/@{bytes.out}`;
exports.LOG_VERDACCIO_BYTES = LOG_VERDACCIO_BYTES;

function log(req, res, next) {
  // logger
  req.log = _logger.logger.child({
    sub: 'in'
  });
  const _auth = req.headers.authorization;

  if (_lodash.default.isNil(_auth) === false) {
    req.headers.authorization = '<Classified>';
  }

  const _cookie = req.headers.cookie;

  if (_lodash.default.isNil(_cookie) === false) {
    req.headers.cookie = '<Classified>';
  }

  req.url = req.originalUrl;
  req.log.info({
    req: req,
    ip: req.ip
  }, "@{ip} requested '@{req.method} @{req.url}'");
  req.originalUrl = req.url;

  if (_lodash.default.isNil(_auth) === false) {
    req.headers.authorization = _auth;
  }

  if (_lodash.default.isNil(_cookie) === false) {
    req.headers.cookie = _cookie;
  }

  let bytesin = 0;
  req.on('data', function (chunk) {
    bytesin += chunk.length;
  });
  let bytesout = 0;
  const _write = res.write; // FIXME: res.write should return boolean
  // @ts-ignore

  res.write = function (buf) {
    bytesout += buf.length;
    /* eslint prefer-rest-params: "off" */
    // @ts-ignore

    _write.apply(res, arguments);
  };

  const log = function () {
    const forwardedFor = req.headers['x-forwarded-for'];
    const remoteAddress = req.connection.remoteAddress;
    const remoteIP = forwardedFor ? `${forwardedFor} via ${remoteAddress}` : remoteAddress;
    let message;

    if (res._verdaccio_error) {
      message = LOG_VERDACCIO_ERROR;
    } else {
      message = LOG_VERDACCIO_BYTES;
    }

    req.url = req.originalUrl;
    req.log.warn({
      request: {
        method: req.method,
        url: req.url
      },
      level: 35,
      // http
      user: req.remote_user && req.remote_user.name || null,
      remoteIP,
      status: res.statusCode,
      error: res._verdaccio_error,
      bytes: {
        in: bytesin,
        out: bytesout
      }
    }, message);
    req.originalUrl = req.url;
  };

  req.on('close', function () {
    log();
  });
  const _end = res.end;

  res.end = function (buf) {
    if (buf) {
      bytesout += buf.length;
    }
    /* eslint prefer-rest-params: "off" */
    // @ts-ignore


    _end.apply(res, arguments);

    log();
  };

  next();
} // Middleware


function errorReportingMiddleware(req, res, next) {
  res.report_error = res.report_error || function (err) {
    if (err.status && err.status >= _constants.HTTP_STATUS.BAD_REQUEST && err.status < 600) {
      if (_lodash.default.isNil(res.headersSent) === false) {
        res.status(err.status);
        next({
          error: err.message || _constants.API_ERROR.UNKNOWN_ERROR
        });
      }
    } else {
      _logger.logger.error({
        err: err
      }, 'unexpected error: @{!err.message}\n@{err.stack}');

      if (!res.status || !res.send) {
        _logger.logger.error('this is an error in express.js, please report this');

        res.destroy();
      } else if (!res.headersSent) {
        res.status(_constants.HTTP_STATUS.INTERNAL_ERROR);
        next({
          error: _constants.API_ERROR.INTERNAL_SERVER_ERROR
        });
      } else {// socket should be already closed
      }
    }
  };

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6WyJtYXRjaCIsInJlZ2V4cCIsInJlcSIsInJlcyIsIm5leHQiLCJ2YWx1ZSIsImV4ZWMiLCJzZXRTZWN1cml0eVdlYkhlYWRlcnMiLCJoZWFkZXIiLCJIRUFERVJTIiwiRlJBTUVTX09QVElPTlMiLCJDU1AiLCJDVE8iLCJYU1MiLCJ2YWxpZGF0ZU5hbWUiLCJuYW1lIiwiRXJyb3JDb2RlIiwiZ2V0Rm9yYmlkZGVuIiwidmFsaWRhdGVQYWNrYWdlIiwibWVkaWEiLCJleHBlY3QiLCJoZWFkZXJzIiwiSEVBREVSX1RZUEUiLCJDT05URU5UX1RZUEUiLCJnZXRDb2RlIiwiSFRUUF9TVEFUVVMiLCJVTlNVUFBPUlRFRF9NRURJQSIsImVuY29kZVNjb3BlUGFja2FnZSIsInVybCIsImluZGV4T2YiLCJyZXBsYWNlIiwiZXhwZWN0SnNvbiIsImJvZHkiLCJnZXRCYWRSZXF1ZXN0IiwiYW50aUxvb3AiLCJjb25maWciLCJ2aWEiLCJhcnIiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJtIiwic2VydmVyX2lkIiwiTE9PUF9ERVRFQ1RFRCIsImFsbG93IiwiYXV0aCIsImFjdGlvbiIsInBhdXNlIiwicGFja2FnZU5hbWUiLCJwYXJhbXMiLCJzY29wZSIsInBhY2thZ2UiLCJwYWNrYWdlVmVyc2lvbiIsImZpbGVuYW1lIiwidW5kZWZpbmVkIiwicmVtb3RlIiwicmVtb3RlX3VzZXIiLCJsb2dnZXIiLCJ0cmFjZSIsInVzZXIiLCJlcnJvciIsImFsbG93ZWQiLCJyZXN1bWUiLCJnZXRJbnRlcm5hbEVycm9yIiwiQVBJX0VSUk9SIiwiUExVR0lOX0VSUk9SIiwiZmluYWwiLCJzdGF0dXNDb2RlIiwiVU5BVVRIT1JJWkVEIiwiZ2V0SGVhZGVyIiwiV1dXX0FVVEgiLCJUT0tFTl9CQVNJQyIsIlRPS0VOX0JFQVJFUiIsIl8iLCJpc1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsImlzTmlsIiwiX3ZlcmRhY2Npb19lcnJvciIsInN0cmluZ2lmeSIsIk9LIiwiTVVMVElQTEVfQ0hPSUNFUyIsIkVUQUciLCJlcnIiLCJtZXNzYWdlIiwic29ja2V0IiwiZGVzdHJveSIsInNlbmQiLCJMT0dfU1RBVFVTX01FU1NBR0UiLCJMT0dfVkVSREFDQ0lPX0VSUk9SIiwiTE9HX1ZFUkRBQ0NJT19CWVRFUyIsImxvZyIsImNoaWxkIiwic3ViIiwiX2F1dGgiLCJhdXRob3JpemF0aW9uIiwiX2Nvb2tpZSIsImNvb2tpZSIsIm9yaWdpbmFsVXJsIiwiaW5mbyIsImlwIiwiYnl0ZXNpbiIsIm9uIiwiY2h1bmsiLCJieXRlc291dCIsIl93cml0ZSIsIndyaXRlIiwiYnVmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmb3J3YXJkZWRGb3IiLCJyZW1vdGVBZGRyZXNzIiwiY29ubmVjdGlvbiIsInJlbW90ZUlQIiwid2FybiIsInJlcXVlc3QiLCJtZXRob2QiLCJsZXZlbCIsInN0YXR1cyIsImJ5dGVzIiwiaW4iLCJvdXQiLCJfZW5kIiwiZW5kIiwiZXJyb3JSZXBvcnRpbmdNaWRkbGV3YXJlIiwicmVwb3J0X2Vycm9yIiwiQkFEX1JFUVVFU1QiLCJoZWFkZXJzU2VudCIsIlVOS05PV05fRVJST1IiLCJJTlRFUk5BTF9FUlJPUiIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUdBOzs7O0FBR08sU0FBU0EsS0FBVCxDQUFlQyxNQUFmLEVBQW9DO0FBQ3pDLFNBQU8sVUFBU0MsR0FBVCxFQUE4QkMsR0FBOUIsRUFBb0RDLElBQXBELEVBQTRFQyxLQUE1RSxFQUFpRztBQUN0RyxRQUFJSixNQUFNLENBQUNLLElBQVAsQ0FBWUQsS0FBWixDQUFKLEVBQXdCO0FBQ3RCRCxNQUFBQSxJQUFJO0FBQ0wsS0FGRCxNQUVPO0FBQ0xBLE1BQUFBLElBQUksQ0FBQyxPQUFELENBQUo7QUFDRDtBQUNGLEdBTkQ7QUFPRDs7QUFFTSxTQUFTRyxxQkFBVCxD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QUxELE1BS087QUFDTHZFLHFCQUFPRyxLQUFQLENBQWE7QUFBRXVCLFFBQUFBLEdBQUcsRUFBRUE7QUFBUCxPQUFiLEVBQTJCLGlEQUEzQjs7QUFDQSxVQUFJLENBQUNoRixHQUFHLENBQUNtSCxNQUFMLElBQWUsQ0FBQ25ILEdBQUcsQ0FBQ29GLElBQXhCLEVBQThCO0FBQzVCOUIsdUJBQU9HLEtBQVAsQ0FBYSxvREFBYjs7QUFDQXpELFFBQUFBLEdBQUcsQ0FBQ21GLE9BQUo7QUFDRCxPQUhELE1BR08sSUFBSSxDQUFDbkYsR0FBRyxDQUFDNEgsV0FBVCxFQUFzQjtBQUMzQjVILFFBQUFBLEdBQUcsQ0FBQ21ILE1BQUosQ0FBVzdGLHVCQUFZd0csY0FBdkI7QUFDQTdILFFBQUFBLElBQUksQ0FBQztBQUFFd0QsVUFBQUEsS0FBSyxFQUFFSSxxQkFBVWtFO0FBQW5CLFNBQUQsQ0FBSjtBQUNELE9BSE0sTUFHQSxDQUNMO0FBQ0Q7QUFDRjtBQUNGLEdBcEJIOztBQXNCQTlILEVBQUFBLElBQUk7QUFDTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHZhbGlkYXRlTmFtZSBhcyB1dGlsVmFsaWRhdGVOYW1lLCB2YWxpZGF0ZVBhY2thZ2UgYXMgdXRpbFZhbGlkYXRlUGFja2FnZSwgZ2V0VmVyc2lvbkZyb21UYXJiYWxsLCBpc09iamVjdCwgRXJyb3JDb2RlIH0gZnJvbSAnLi4vbGliL3V0aWxzJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgSEVBREVSX1RZUEUsIEhFQURFUlMsIEhUVFBfU1RBVFVTLCBUT0tFTl9CQVNJQywgVE9LRU5fQkVBUkVSIH0gZnJvbSAnLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBzdHJpbmdUb01ENSB9IGZyb20gJy4uL2xpYi9jcnlwdG8tdXRpbHMnO1xuaW1wb3J0IHsgJFJlc3BvbnNlRXh0ZW5kLCAkUmVxdWVzdEV4dGVuZCwgJE5leHRGdW5jdGlvblZlciwgSUF1dGggfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBDb25maWcsIFBhY2thZ2UsIFJlbW90ZVVzZXIgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL2xpYi9sb2dnZXInO1xuaW1wb3J0IHsgVmVyZGFjY2lvRXJyb3IgfSBmcm9tICdAdmVyZGFjY2lvL2NvbW1vbnMtYXBpJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cDogUmVnRXhwKTogYW55IHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHJlZ2V4cC5leGVjKHZhbHVlKSkge1xuICAgICAgbmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0KCdyb3V0ZScpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNlY3VyaXR5V2ViSGVhZGVycyhyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAvLyBkaXNhYmxlIGxvYWRpbmcgaW4gZnJhbWVzIChjbGlja2phY2tpbmcsIGV0Yy4pXG4gIHJlcy5oZWFkZXIoSEVBREVSUy5GUkFNRVNfT1BUSU9OUywgJ2RlbnknKTtcbiAgLy8gYXZvaWQgc3RhYmxpc2ggY29ubmVjdGlvbnMgb3V0c2lkZSBvZiBkb21haW5cbiAgcmVzLmhlYWRlcihIRUFERVJTLkNTUCwgXCJjb25uZWN0LXNyYyAnc2VsZidcIik7XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MzM3NjMwL3doYXQtaXMteC1jb250ZW50LXR5cGUtb3B0aW9ucy1ub3NuaWZmXG4gIHJlcy5oZWFkZXIoSEVBREVSUy5DVE8sICdub3NuaWZmJyk7XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzkwOTA1Nzcvd2hhdC1pcy10aGUtaHR0cC1oZWFkZXIteC14c3MtcHJvdGVjdGlvblxuICByZXMuaGVhZGVyKEhFQURFUlMuWFNTLCAnMTsgbW9kZT1ibG9jaycpO1xuICBuZXh0KCk7XG59XG5cbi8vIGZsb3c6IGV4cHJlc3MgZG9lcyBub3QgbWF0Y2ggcHJvcGVybHlcbi8vIGZsb3cgaW5mbyBodHRwczovL2dpdGh1Yi5jb20vZmxvd3R5cGUvZmxvdy10eXBlZC9pc3N1ZXM/dXRmOD0lRTIlOUMlOTMmcT1pcyUzQWlzc3VlK2lzJTNBb3BlbitleHByZXNzXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOYW1lKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyLCB2YWx1ZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKHZhbHVlID09PSAnLScpIHtcbiAgICAvLyBzcGVjaWFsIGNhc2UgaW4gY291Y2hkYiB1c3VhbGx5XG4gICAgbmV4dCgncm91dGUnKTtcbiAgfSBlbHNlIGlmICh1dGlsVmFsaWRhdGVOYW1lKHZhbHVlKSkge1xuICAgIG5leHQoKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0KEVycm9yQ29kZS5nZXRGb3JiaWRkZW4oJ2ludmFsaWQgJyArIG5hbWUpKTtcbiAgfVxufVxuXG4vLyBmbG93OiBleHByZXNzIGRvZXMgbm90IG1hdGNoIHByb3Blcmx5XG4vLyBmbG93IGluZm8gaHR0cHM6Ly9naXRodWIuY29tL2Zsb3d0eXBlL2Zsb3ctdHlwZWQvaXNzdWVzP3V0Zjg9JUUyJTlDJTkzJnE9aXMlM0Fpc3N1ZStpcyUzQW9wZW4rZXhwcmVzc1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUGFja2FnZShyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlciwgdmFsdWU6IHN0cmluZywgbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICh2YWx1ZSA9PT0gJy0nKSB7XG4gICAgLy8gc3BlY2lhbCBjYXNlIGluIGNvdWNoZGIgdXN1YWxseVxuICAgIG5leHQoJ3JvdXRlJyk7XG4gIH0gZWxzZSBpZiAodXRpbFZhbGlkYXRlUGFja2FnZSh2YWx1ZSkpIHtcbiAgICBuZXh0KCk7XG4gIH0gZWxzZSB7XG4gICAgbmV4dChFcnJvckNvZGUuZ2V0Rm9yYmlkZGVuKCdpbnZhbGlkICcgKyBuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lZGlhKGV4cGVjdDogc3RyaW5nIHwgbnVsbCk6IGFueSB7XG4gIHJldHVybiBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIGlmIChyZXEuaGVhZGVyc1tIRUFERVJfVFlQRS5DT05URU5UX1RZUEVdICE9PSBleHBlY3QpIHtcbiAgICAgIG5leHQoRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuVU5TVVBQT1JURURfTUVESUEsICd3cm9uZyBjb250ZW50LXR5cGUsIGV4cGVjdDogJyArIGV4cGVjdCArICcsIGdvdDogJyArIHJlcS5oZWFkZXJzW0hFQURFUl9UWVBFLkNPTlRFTlRfVFlQRV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVNjb3BlUGFja2FnZShyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICBpZiAocmVxLnVybC5pbmRleE9mKCdAJykgIT09IC0xKSB7XG4gICAgLy8gZS5nLjogL0BvcmcvcGtnLzEuMi4zIC0+IC9Ab3JnJTJGcGtnLzEuMi4zLCAvQG9yZyUyRnBrZy8xLjIuMyAtPiAvQG9yZyUyRnBrZy8xLjIuM1xuICAgIHJlcS51cmwgPSByZXEudXJsLnJlcGxhY2UoL14oXFwvQFteXFwvJV0rKVxcLyg/ISQpLywgJyQxJTJGJyk7XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0SnNvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICBpZiAoIWlzT2JqZWN0KHJlcS5ib2R5KSkge1xuICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRCYWRSZXF1ZXN0KFwiY2FuJ3QgcGFyc2UgaW5jb21pbmcganNvblwiKSk7XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW50aUxvb3AoY29uZmlnOiBDb25maWcpOiBGdW5jdGlvbiB7XG4gIHJldHVybiBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIGlmIChyZXEuaGVhZGVycy52aWEgIT0gbnVsbCkge1xuICAgICAgY29uc3QgYXJyID0gcmVxLmhlYWRlcnMudmlhLnNwbGl0KCcsJyk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG0gPSBhcnJbaV0ubWF0Y2goL1xccyooXFxTKylcXHMrKFxcUyspLyk7XG4gICAgICAgIGlmIChtICYmIG1bMl0gPT09IGNvbmZpZy5zZXJ2ZXJfaWQpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Q29kZShIVFRQX1NUQVRVUy5MT09QX0RFVEVDVEVELCAnbG9vcCBkZXRlY3RlZCcpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBuZXh0KCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvdyhhdXRoOiBJQXV0aCk6IEZ1bmN0aW9uIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFjdGlvbjogc3RyaW5nKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgcmVxLnBhdXNlKCk7XG4gICAgICBjb25zdCBwYWNrYWdlTmFtZSA9IHJlcS5wYXJhbXMuc2NvcGUgPyBgQCR7cmVxLnBhcmFtcy5zY29wZX0vJHtyZXEucGFyYW1zLnBhY2thZ2V9YCA6IHJlcS5wYXJhbXMucGFja2FnZTtcbiAgICAgIGNvbnN0IHBhY2thZ2VWZXJzaW9uID0gcmVxLnBhcmFtcy5maWxlbmFtZSA/IGdldFZlcnNpb25Gcm9tVGFyYmFsbChyZXEucGFyYW1zLmZpbGVuYW1lKSA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHJlbW90ZTogUmVtb3RlVXNlciA9IHJlcS5yZW1vdGVfdXNlcjtcbiAgICAgIGxvZ2dlci50cmFjZSh7IGFjdGlvbiwgdXNlcjogcmVtb3RlLm5hbWUgfSwgYFttaWRkbGV3YXJlL2FsbG93XVtAe2FjdGlvbn1dIGFsbG93IGZvciBAe3VzZXJ9YCk7XG5cbiAgICAgIGF1dGhbJ2FsbG93XycgKyBhY3Rpb25dKHsgcGFja2FnZU5hbWUsIHBhY2thZ2VWZXJzaW9uIH0sIHJlbW90ZSwgZnVuY3Rpb24oZXJyb3IsIGFsbG93ZWQpOiB2b2lkIHtcbiAgICAgICAgcmVxLnJlc3VtZSgpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxvd2VkKSB7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhc3QgcGx1Z2luICh0aGF0J3Mgb3VyIGJ1aWx0LWluIG9uZSkgcmV0dXJucyBlaXRoZXJcbiAgICAgICAgICAvLyBjYihlcnIpIG9yIGNiKG51bGwsIHRydWUpLCBzbyB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgICAgICB0aHJvdyBFcnJvckNvZGUuZ2V0SW50ZXJuYWxFcnJvcihBUElfRVJST1IuUExVR0lOX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaWRkbGV3YXJlRXJyb3Ige1xuICBlcnJvcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBGaW5hbEJvZHkgPSBQYWNrYWdlIHwgTWlkZGxld2FyZUVycm9yIHwgc3RyaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gZmluYWwoYm9keTogRmluYWxCb2R5LCByZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCAmJiAhcmVzLmdldEhlYWRlcihIRUFERVJTLldXV19BVVRIKSkge1xuICAgIC8vIHRoZXkgc2F5IGl0J3MgcmVxdWlyZWQgZm9yIDQwMSwgc28uLi5cbiAgICByZXMuaGVhZGVyKEhFQURFUlMuV1dXX0FVVEgsIGAke1RPS0VOX0JBU0lDfSwgJHtUT0tFTl9CRUFSRVJ9YCk7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChfLmlzU3RyaW5nKGJvZHkpIHx8IF8uaXNPYmplY3QoYm9keSkpIHtcbiAgICAgIGlmICghcmVzLmdldEhlYWRlcihIRUFERVJTLkNPTlRFTlRfVFlQRSkpIHtcbiAgICAgICAgcmVzLmhlYWRlcihIRUFERVJTLkNPTlRFTlRfVFlQRSwgSEVBREVSUy5KU09OKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnb2JqZWN0JyAmJiBfLmlzTmlsKGJvZHkpID09PSBmYWxzZSkge1xuICAgICAgICBpZiAodHlwZW9mIChib2R5IGFzIE1pZGRsZXdhcmVFcnJvcikuZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmVzLl92ZXJkYWNjaW9fZXJyb3IgPSAoYm9keSBhcyBNaWRkbGV3YXJlRXJyb3IpLmVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5LCB1bmRlZmluZWQsICcgICcpICsgJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIC8vIGRvbid0IHNlbmQgZXRhZ3Mgd2l0aCBlcnJvcnNcbiAgICAgIGlmICghcmVzLnN0YXR1c0NvZGUgfHwgKHJlcy5zdGF0dXNDb2RlID49IEhUVFBfU1RBVFVTLk9LICYmIHJlcy5zdGF0dXNDb2RlIDwgSFRUUF9TVEFUVVMuTVVMVElQTEVfQ0hPSUNFUykpIHtcbiAgICAgICAgcmVzLmhlYWRlcihIRUFERVJTLkVUQUcsICdcIicgKyBzdHJpbmdUb01ENShib2R5IGFzIHN0cmluZykgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2VuZChudWxsKSwgc2VuZCgyMDQpLCBldGMuXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpZiB2ZXJkYWNjaW8gc2VuZHMgaGVhZGVycyBmaXJzdCwgYW5kIHRoZW4gY2FsbHMgcmVzLnNlbmQoKVxuICAgIC8vIGFzIGFuIGVycm9yIGhhbmRsZXIsIHdlIGNhbid0IHJlcG9ydCBlcnJvciBwcm9wZXJseSxcbiAgICAvLyBhbmQgc2hvdWxkIGp1c3QgY2xvc2Ugc29ja2V0XG4gICAgaWYgKGVyci5tZXNzYWdlLm1hdGNoKC9zZXQgaGVhZGVycyBhZnRlciB0aGV5IGFyZSBzZW50LykpIHtcbiAgICAgIGlmIChfLmlzTmlsKHJlcy5zb2NrZXQpID09PSBmYWxzZSkge1xuICAgICAgICByZXMuc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgcmVzLnNlbmQoYm9keSk7XG59XG5cbmV4cG9ydCBjb25zdCBMT0dfU1RBVFVTX01FU1NBR0UgPSBcIkB7c3RhdHVzfSwgdXNlcjogQHt1c2VyfShAe3JlbW90ZUlQfSksIHJlcTogJ0B7cmVxdWVzdC5tZXRob2R9IEB7cmVxdWVzdC51cmx9J1wiO1xuZXhwb3J0IGNvbnN0IExPR19WRVJEQUNDSU9fRVJST1IgPSBgJHtMT0dfU1RBVFVTX01FU1NBR0V9LCBlcnJvcjogQHshZXJyb3J9YDtcbmV4cG9ydCBjb25zdCBMT0dfVkVSREFDQ0lPX0JZVEVTID0gYCR7TE9HX1NUQVRVU19NRVNTQUdFfSwgYnl0ZXM6IEB7Ynl0ZXMuaW59L0B7Ynl0ZXMub3V0fWA7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2cocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgLy8gbG9nZ2VyXG4gIHJlcS5sb2cgPSBsb2dnZXIuY2hpbGQoeyBzdWI6ICdpbicgfSk7XG5cbiAgY29uc3QgX2F1dGggPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICBpZiAoXy5pc05pbChfYXV0aCkgPT09IGZhbHNlKSB7XG4gICAgcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9ICc8Q2xhc3NpZmllZD4nO1xuICB9XG5cbiAgY29uc3QgX2Nvb2tpZSA9IHJlcS5oZWFkZXJzLmNvb2tpZTtcbiAgaWYgKF8uaXNOaWwoX2Nvb2tpZSkgPT09IGZhbHNlKSB7XG4gICAgcmVxLmhlYWRlcnMuY29va2llID0gJzxDbGFzc2lmaWVkPic7XG4gIH1cblxuICByZXEudXJsID0gcmVxLm9yaWdpbmFsVXJsO1xuICByZXEubG9nLmluZm8oeyByZXE6IHJlcSwgaXA6IHJlcS5pcCB9LCBcIkB7aXB9IHJlcXVlc3RlZCAnQHtyZXEubWV0aG9kfSBAe3JlcS51cmx9J1wiKTtcbiAgcmVxLm9yaWdpbmFsVXJsID0gcmVxLnVybDtcblxuICBpZiAoXy5pc05pbChfYXV0aCkgPT09IGZhbHNlKSB7XG4gICAgcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IF9hdXRoO1xuICB9XG5cbiAgaWYgKF8uaXNOaWwoX2Nvb2tpZSkgPT09IGZhbHNlKSB7XG4gICAgcmVxLmhlYWRlcnMuY29va2llID0gX2Nvb2tpZTtcbiAgfVxuXG4gIGxldCBieXRlc2luID0gMDtcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspOiB2b2lkIHtcbiAgICBieXRlc2luICs9IGNodW5rLmxlbmd0aDtcbiAgfSk7XG5cbiAgbGV0IGJ5dGVzb3V0ID0gMDtcbiAgY29uc3QgX3dyaXRlID0gcmVzLndyaXRlO1xuICAvLyBGSVhNRTogcmVzLndyaXRlIHNob3VsZCByZXR1cm4gYm9vbGVhblxuICAvLyBAdHMtaWdub3JlXG4gIHJlcy53cml0ZSA9IGZ1bmN0aW9uKGJ1Zik6IGJvb2xlYW4ge1xuICAgIGJ5dGVzb3V0ICs9IGJ1Zi5sZW5ndGg7XG4gICAgLyogZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogXCJvZmZcIiAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBfd3JpdGUuYXBwbHkocmVzLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIGNvbnN0IGxvZyA9IGZ1bmN0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IGZvcndhcmRlZEZvciA9IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXTtcbiAgICBjb25zdCByZW1vdGVBZGRyZXNzID0gcmVxLmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzcztcbiAgICBjb25zdCByZW1vdGVJUCA9IGZvcndhcmRlZEZvciA/IGAke2ZvcndhcmRlZEZvcn0gdmlhICR7cmVtb3RlQWRkcmVzc31gIDogcmVtb3RlQWRkcmVzcztcbiAgICBsZXQgbWVzc2FnZTtcbiAgICBpZiAocmVzLl92ZXJkYWNjaW9fZXJyb3IpIHtcbiAgICAgIG1lc3NhZ2UgPSBMT0dfVkVSREFDQ0lPX0VSUk9SO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gTE9HX1ZFUkRBQ0NJT19CWVRFUztcbiAgICB9XG5cbiAgICByZXEudXJsID0gcmVxLm9yaWdpbmFsVXJsO1xuICAgIHJlcS5sb2cud2FybihcbiAgICAgIHtcbiAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICAgICAgICB1cmw6IHJlcS51cmwsXG4gICAgICAgIH0sXG4gICAgICAgIGxldmVsOiAzNSwgLy8gaHR0cFxuICAgICAgICB1c2VyOiAocmVxLnJlbW90ZV91c2VyICYmIHJlcS5yZW1vdGVfdXNlci5uYW1lKSB8fCBudWxsLFxuICAgICAgICByZW1vdGVJUCxcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgZXJyb3I6IHJlcy5fdmVyZGFjY2lvX2Vycm9yLFxuICAgICAgICBieXRlczoge1xuICAgICAgICAgIGluOiBieXRlc2luLFxuICAgICAgICAgIG91dDogYnl0ZXNvdXQsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbWVzc2FnZVxuICAgICk7XG4gICAgcmVxLm9yaWdpbmFsVXJsID0gcmVxLnVybDtcbiAgfTtcblxuICByZXEub24oJ2Nsb3NlJywgZnVuY3Rpb24oKTogdm9pZCB7XG4gICAgbG9nKCk7XG4gIH0pO1xuXG4gIGNvbnN0IF9lbmQgPSByZXMuZW5kO1xuICByZXMuZW5kID0gZnVuY3Rpb24oYnVmKTogdm9pZCB7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgYnl0ZXNvdXQgKz0gYnVmLmxlbmd0aDtcbiAgICB9XG4gICAgLyogZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogXCJvZmZcIiAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBfZW5kLmFwcGx5KHJlcywgYXJndW1lbnRzKTtcbiAgICBsb2coKTtcbiAgfTtcbiAgbmV4dCgpO1xufVxuXG4vLyBNaWRkbGV3YXJlXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JSZXBvcnRpbmdNaWRkbGV3YXJlKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gIHJlcy5yZXBvcnRfZXJyb3IgPVxuICAgIHJlcy5yZXBvcnRfZXJyb3IgfHxcbiAgICBmdW5jdGlvbihlcnI6IFZlcmRhY2Npb0Vycm9yKTogdm9pZCB7XG4gICAgICBpZiAoZXJyLnN0YXR1cyAmJiBlcnIuc3RhdHVzID49IEhUVFBfU1RBVFVTLkJBRF9SRVFVRVNUICYmIGVyci5zdGF0dXMgPCA2MDApIHtcbiAgICAgICAgaWYgKF8uaXNOaWwocmVzLmhlYWRlcnNTZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMpO1xuICAgICAgICAgIG5leHQoeyBlcnJvcjogZXJyLm1lc3NhZ2UgfHwgQVBJX0VSUk9SLlVOS05PV05fRVJST1IgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcih7IGVycjogZXJyIH0sICd1bmV4cGVjdGVkIGVycm9yOiBAeyFlcnIubWVzc2FnZX1cXG5Ae2Vyci5zdGFja30nKTtcbiAgICAgICAgaWYgKCFyZXMuc3RhdHVzIHx8ICFyZXMuc2VuZCkge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcigndGhpcyBpcyBhbiBlcnJvciBpbiBleHByZXNzLmpzLCBwbGVhc2UgcmVwb3J0IHRoaXMnKTtcbiAgICAgICAgICByZXMuZGVzdHJveSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCFyZXMuaGVhZGVyc1NlbnQpIHtcbiAgICAgICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLklOVEVSTkFMX0VSUk9SKTtcbiAgICAgICAgICBuZXh0KHsgZXJyb3I6IEFQSV9FUlJPUi5JTlRFUk5BTF9TRVJWRVJfRVJST1IgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc29ja2V0IHNob3VsZCBiZSBhbHJlYWR5IGNsb3NlZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICBuZXh0KCk7XG59XG4iXX0=