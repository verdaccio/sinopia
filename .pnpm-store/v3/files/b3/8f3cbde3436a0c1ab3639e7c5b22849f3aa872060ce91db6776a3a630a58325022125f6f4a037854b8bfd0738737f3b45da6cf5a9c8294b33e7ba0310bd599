"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _mime = _interopRequireDefault(require("mime"));

var _lodash = _interopRequireDefault(require("lodash"));

var _middleware = require("../../middleware");

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth, storage) {
  const can = (0, _middleware.allow)(auth);

  const tag_package_version = function (req, res, next) {
    if (_lodash.default.isString(req.body) === false) {
      return next('route');
    }

    const tags = {};
    tags[req.params.tag] = req.body;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_ADDED
      });
    });
  }; // tagging a package


  route.put('/:package/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.post('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.put('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.delete('/-/package/:package/dist-tags/:tag', can('publish'), function (req, res, next) {
    const tags = {};
    tags[req.params.tag] = null;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_REMOVED
      });
    });
  });
  route.get('/-/package/:package/dist-tags', can('access'), function (req, res, next) {
    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        next(info[_constants.DIST_TAGS]);
      }
    });
  });
  route.post('/-/package/:package/dist-tags', can('publish'), function (req, res, next) {
    storage.mergeTags(req.params.package, req.body, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_UPDATED
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL2Rpc3QtdGFncy50cyJdLCJuYW1lcyI6WyJyb3V0ZSIsImF1dGgiLCJzdG9yYWdlIiwiY2FuIiwidGFnX3BhY2thZ2VfdmVyc2lvbiIsInJlcSIsInJlcyIsIm5leHQiLCJfIiwiaXNTdHJpbmciLCJib2R5IiwidGFncyIsInBhcmFtcyIsInRhZyIsIm1lcmdlVGFncyIsInBhY2thZ2UiLCJlcnIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIkNSRUFURUQiLCJvayIsIkFQSV9NRVNTQUdFIiwiVEFHX0FEREVEIiwicHV0IiwibWltZSIsImdldFR5cGUiLCJwb3N0IiwiZGVsZXRlIiwiVEFHX1JFTU9WRUQiLCJnZXQiLCJnZXRQYWNrYWdlIiwibmFtZSIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJpbmZvIiwiRElTVF9UQUdTIiwiVEFHX1VQREFURUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQTs7OztBQUllLGtCQUFTQSxLQUFULEVBQXdCQyxJQUF4QixFQUFxQ0MsT0FBckMsRUFBcUU7QUFDbEYsUUFBTUMsR0FBRyxHQUFHLHVCQUFNRixJQUFOLENBQVo7O0FBQ0EsUUFBTUcsbUJBQW1CLEdBQUcsVUFBU0MsR0FBVCxFQUE4QkMsR0FBOUIsRUFBb0RDLElBQXBELEVBQThGO0FBQ3hILFFBQUlDLGdCQUFFQyxRQUFGLENBQVdKLEdBQUcsQ0FBQ0ssSUFBZixNQUF5QixLQUE3QixFQUFvQztBQUNsQyxhQUFPSCxJQUFJLENBQUMsT0FBRCxDQUFYO0FBQ0Q7O0FBRUQsVUFBTUksSUFBSSxHQUFHLEVBQWI7QUFDQUEsSUFBQUEsSUFBSSxDQUFDTixHQUFHLENBQUNPLE1BQUosQ0FBV0MsR0FBWixDQUFKLEdBQXVCUixHQUFHLENBQUNLLElBQTNCO0FBQ0FSLElBQUFBLE9BQU8sQ0FBQ1ksU0FBUixDQUFrQlQsR0FBRyxDQUFDTyxNQUFKLENBQVdHLE9BQTdCLEVB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Z0QsVUFBU00sR0FBVCxFQUFnRDtBQUM5RixVQUFJQSxHQUFKLEVBQVM7QUFDUCxlQUFPVCxJQUFJLENBQUNTLEdBQUQsQ0FBWDtBQUNEOztBQUNEVixNQUFBQSxHQUFHLENBQUNXLE1BQUosQ0FBV0MsdUJBQVlDLE9BQXZCO0FBQ0EsYUFBT1osSUFBSSxDQUFDO0FBQ1ZhLFFBQUFBLEVBQUUsRUFBRUMsdUJBQVllO0FBRE4sT0FBRCxDQUFYO0FBR0QsS0FSRDtBQVNELEdBVkQ7QUFXRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtaW1lIGZyb20gJ21pbWUnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IG1lZGlhLCBhbGxvdyB9IGZyb20gJy4uLy4uL21pZGRsZXdhcmUnO1xuaW1wb3J0eyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydHsgSUF1dGgsICRSZXNwb25zZUV4dGVuZCwgJFJlcXVlc3RFeHRlbmQsICROZXh0RnVuY3Rpb25WZXIsIElTdG9yYWdlSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEFQSV9NRVNTQUdFLCBIVFRQX1NUQVRVUywgRElTVF9UQUdTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBWZXJkYWNjaW9FcnJvciB9IGZyb20gJ0B2ZXJkYWNjaW8vY29tbW9ucy1hcGknO1xuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCwgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyKTogdm9pZCB7XG4gIGNvbnN0IGNhbiA9IGFsbG93KGF1dGgpO1xuICBjb25zdCB0YWdfcGFja2FnZV92ZXJzaW9uID0gZnVuY3Rpb24ocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICBpZiAoXy5pc1N0cmluZyhyZXEuYm9keSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gbmV4dCgncm91dGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCB0YWdzID0ge307XG4gICAgdGFnc1tyZXEucGFyYW1zLnRhZ10gPSByZXEuYm9keTtcbiAgICBzdG9yYWdlLm1lcmdlVGFncyhyZXEucGFyYW1zLnBhY2thZ2UsIHRhZ3MsIGZ1bmN0aW9uKGVycjogRXJyb3IpOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7IG9rOiBBUElfTUVTU0FHRS5UQUdfQURERUQgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gdGFnZ2luZyBhIHBhY2thZ2VcbiAgcm91dGUucHV0KCcvOnBhY2thZ2UvOnRhZycsIGNhbigncHVibGlzaCcpLCBtZWRpYShtaW1lLmdldFR5cGUoJ2pzb24nKSksIHRhZ19wYWNrYWdlX3ZlcnNpb24pO1xuXG4gIHJvdXRlLnBvc3QoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLCB0YWdfcGFja2FnZV92ZXJzaW9uKTtcblxuICByb3V0ZS5wdXQoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLCB0YWdfcGFja2FnZV92ZXJzaW9uKTtcblxuICByb3V0ZS5kZWxldGUoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgZnVuY3Rpb24ocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0YWdzID0ge307XG4gICAgdGFnc1tyZXEucGFyYW1zLnRhZ10gPSBudWxsO1xuICAgIHN0b3JhZ2UubWVyZ2VUYWdzKHJlcS5wYXJhbXMucGFja2FnZSwgdGFncywgZnVuY3Rpb24oZXJyOiBWZXJkYWNjaW9FcnJvcik6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5DUkVBVEVEKTtcbiAgICAgIHJldHVybiBuZXh0KHtcbiAgICAgICAgb2s6IEFQSV9NRVNTQUdFLlRBR19SRU1PVkVELFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJvdXRlLmdldCgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MnLCBjYW4oJ2FjY2VzcycpLCBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICBuYW1lOiByZXEucGFyYW1zLnBhY2thZ2UsXG4gICAgICB1cGxpbmtzTG9vazogdHJ1ZSxcbiAgICAgIHJlcSxcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbihlcnI6IFZlcmRhY2Npb0Vycm9yLCBpbmZvOiBQYWNrYWdlKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChpbmZvW0RJU1RfVEFHU10pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcm91dGUucG9zdCgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MnLCBjYW4oJ3B1Ymxpc2gnKSwgZnVuY3Rpb24ocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBzdG9yYWdlLm1lcmdlVGFncyhyZXEucGFyYW1zLnBhY2thZ2UsIHJlcS5ib2R5LCBmdW5jdGlvbihlcnI6IFZlcmRhY2Npb0Vycm9yKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLkNSRUFURUQpO1xuICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICBvazogQVBJX01FU1NBR0UuVEFHX1VQREFURUQsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=