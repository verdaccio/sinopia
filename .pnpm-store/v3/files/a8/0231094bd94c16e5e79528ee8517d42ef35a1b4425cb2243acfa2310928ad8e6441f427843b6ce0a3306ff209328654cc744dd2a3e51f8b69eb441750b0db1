"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _commonsApi = require("@verdaccio/commons-api");

var _memoryHandler = _interopRequireDefault(require("./memory-handler"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_LIMIT = 1000;

class LocalMemory {
  constructor(config, options) {
    _defineProperty(this, "path", void 0);

    _defineProperty(this, "limit", void 0);

    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "config", void 0);

    this.config = config;
    this.limit = config.limit || DEFAULT_LIMIT;
    this.logger = options.logger;
    this.data = this._createEmtpyDatabase();
    this.path = '/';
  }

  getSecret() {
    return Promise.resolve(this.data.secret);
  }

  setSecret(secret) {
    return new Promise(resolve => {
      this.data.secret = secret;
      resolve(null);
    });
  }

  add(name, cb) {
    const {
      list
    } = this.data;

    if (list.length < this.limit) {
      if (list.indexOf(name) === -1) {
        list.push(name);
      }

      cb(null);
    } else {
      this.logger.info({
        limit: this.limit
      }, 'Storage memory has reached limit of @{limit} packages');
      cb(new Error('Storage memory has reached limit of limit packages'));
    }
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  search(onPackage, onEnd, validateName) {
    this.logger.warn('[verdaccio/memory]: search method not implemented, PR is welcome');
    onEnd();
  }

  remove(name, cb) {
    const {
      list
    } = this.data;
    const item = list.indexOf(name);

    if (item !== -1) {
      list.splice(item, 1);
    }

    cb(null);
  }

  get(cb) {
    cb(null, this.data.list);
  }

  getPackageStorage(packageInfo) {
    return new _memoryHandler.default(packageInfo, this.data.files, this.logger);
  }

  _createEmtpyDatabase() {
    const list = [];
    const files = {};
    const emptyDatabase = {
      list,
      files,
      secret: ''
    };
    return emptyDatabase;
  }

  saveToken(token) {
    this.logger.warn('[verdaccio/memory][saveToken] save token has not been implemented yet');
    return Promise.reject((0, _commonsApi.getServiceUnavailable)('method not implemented'));
  }

  deleteToken(user, tokenKey) {
    this.logger.warn({
      tokenKey,
      user
    }, '[verdaccio/memory][deleteToken] delete token has not been implemented yet @{user}');
    return Promise.reject((0, _commonsApi.getServiceUnavailable)('method not implemented'));
  }

  readTokens(filter) {
    this.logger.warn('[verdaccio/memory][readTokens] read tokens has not been implemented yet ');
    return Promise.reject((0, _commonsApi.getServiceUnavailable)('method not implemented'));
  }

}

var _default = LocalMemory;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,