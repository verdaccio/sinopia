"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printMessage = printMessage;
exports.fillInMsgTemplate = fillInMsgTemplate;

var _util = require("util");

var _utils = require("../utils");

var _kleur = require("kleur");

var _levels = require("./levels");

let LEVEL_VALUE_MAX = 0;

for (const l in _levels.levels) {
  if (Object.prototype.hasOwnProperty.call(_levels.levels, l)) {
    LEVEL_VALUE_MAX = Math.max(LEVEL_VALUE_MAX, l.length);
  }
}
/**
 * Apply colors to a string based on level parameters.
 * @param {*} type
 * @param {*} msg
 * @param {*} templateObjects
 * @param {*} hasColors
 * @return {String}
 */


function printMessage(type, msg, templateObjects, hasColors) {
  if (typeof type === 'number') {
    type = (0, _levels.calculateLevel)(type);
  }

  const finalMessage = fillInMsgTemplate(msg, templateObjects, hasColors);
  const sub = _levels.subsystems[hasColors ? 0 : 1][templateObjects.sub] || _levels.subsystems[+!hasColors].default;

  if (hasColors) {
    return ` ${_levels.levels[type]((0, _utils.pad)(type, LEVEL_VALUE_MAX))}${(0, _kleur.white)(`${sub} ${finalMessage}`)}`;
  }

  return ` ${(0, _utils.pad)(type, LEVEL_VALUE_MAX)}${sub} ${finalMessage}`;
}

function fillInMsgTemplate(msg, obj, colors) {
  return msg.replace(/@{(!?[$A-Za-z_][$0-9A-Za-z\._]*)}/g, (_, name) => {
    let str = obj;
    let is_error;

    if (name[0] === '!') {
      name = name.substr(1);
      is_error = true;
    }

    const _ref = name.split('.');

    for (let _i = 0; _i < _ref.length; _i++) {
      const id = _ref[_i];

      if ((0, _utils.isObject)(str)) {
        // @ts-ignore
        str = str[id];
      } else {
        str = undefined;
      }
    }

    if (typeof str === 'string') {
      if (!colors || str.includes('\n')) {
        return str;
      } else if (is_error) {
        return (0, _kleur.red)(str);
      }

      return (0, _kleur.green)(str);
    }

    return (0, _util.inspect)(str, undefined, null, colors);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbG9nZ2VyL2Zvcm1hdHRlci50cyJdLCJuYW1lcyI6WyJMRVZFTF9WQUxVRV9NQVgiLCJsIiwibGV2ZWxzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiTWF0aCIsIm1heCIsImxlbmd0aCIsInByaW50TWVzc2FnZSIsInR5cGUiLCJtc2ciLCJ0ZW1wbGF0ZU9iamVjdHMiLCJoYXNDb2xvcnMiLCJmaW5hbE1lc3NhZ2UiLCJmaWxsSW5Nc2dUZW1wbGF0ZSIsInN1YiIsInN1YnN5c3RlbXMiLCJkZWZhdWx0Iiwib2JqIiwiY29sb3JzIiwicmVwbGFjZSIsIl8iLCJuYW1lIiwic3RyIiwiaXNfZXJyb3IiLCJzdWJzdHIiLCJfcmVmIiwic3BsaXQiLCJfaSIsImlkIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBRUEsSUFBSUEsZUFBZSxHQUFHLENBQXRCOztBQUNBLEtBQUssTUFBTUMsQ0FBWCxJQUFnQkMsY0FBaEIsRUFBd0I7QUFDdEIsTUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNKLGNBQXJDLEVBQTZDRCxDQUE3QyxDQUFKLEVBQXFEO0FBQ25ERCxJQUFBQSxlQUFlLEdBQUdPLElBQUksQ0FBQ0MsR0FBTCxDQUFTUixlQUFULEVBQTBCQyxDQUFDLENBQUNRLE1BQTVCLENBQWxCO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7Ozs7O0FBUU8sU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLEdBQTVCLEVBQWlDQyxlQUFqQyxFQUFrREMsU0FBbEQsRUFBNkQ7QUFDbEUsTUFBSSxPQUFPSCxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCQSxJQUFBQSxJQUFJLEdBQUcsNEJBQWVBLElBQWYsQ0FBUDtBQUNEOztBQUVELFFBQU1JLFlBQVksR0FBR0MsaUJBQWlCLENBQUNKLEdBQUQsRUFBTUMsZUFBTixFQUF1QkMsU0FBdkIsQ0FBdEM7QUFFQSxRQUFNRyxHQUFHLEdBQUdDLG1CQUFXSixTQUFTLEdBQUcsQ0FBSCxHQUFPLENBQTNCLEVBQThCRCxlQUFlLENBQUNJLEdBQTlDLEtBQXNEQyxtQkFBVyxDQUFDLENBQUNKLFNBQWIsRUFBd0JLLE9BQTFGOztBQUNBLE1BQUlMLFNBQUosRUFBZTtBQUNiLFdBQVEsSUFBR1osZUFBT1MsSUFBUCxFQUFhLGdCQUFJQSxJQUFKLEVBQVVYLGVBQVYsQ0FBYixDQUF5QyxHQUFFLGtCQUFPLEdBQUVpQixHQUFJLElBQUdGLFlBQWEsRUFBN0IsQ0FBZ0MsRUFBdEY7QUFDRDs7QUFDRCxTQUFRLElBQUcsZ0JBQUlKLElBQUosRUFBVVgsZUFBVixDQUEyQixHQUFFaUIsR0FBSSxJQUFHRixZQUFhLEVBQTVEO0FBQ0Q7O0FBRU0sU0FBU0MsaUJBQVQsQ0FBMkJKLEdBQTNCLEVBQWdDUSxHQUFoQyxFQUE4Q0MsTUFBOUMsRUFBOEQ7QUFDbkUsU0FBT1QsR0FBRyxDQUFDVSxPQUFKLENBQVksb0NBQVosRUFBa0QsQ0FBQ0MsQ0FBRCxFQUFJQyxJQUFKLEtBQXFCO0FBRTVFLFFBQUlDLEdBQUcsR0FBR0wsR0FBVjtBQUNBLFFBQUlNLFFBQUo7O0FBQ0EsUUFBSUYsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZLEdBQWhCLEVBQXFCO0FBQ25CQSxNQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0csTUFBTCxDQUFZLENBQVosQ0FBUDtBQUNBRCxNQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNEOztBQUVELFVBQU1FLElBQUksR0FBR0osSUFBSSxDQUFDSyxLQUFMLENBQVcsR0FBWCxDQUFiOztBQUNBLFNBQUssSUFBSUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0YsSUFBSSxDQUFDbkIsTUFBM0IsRUFBbUNxQixFQUFFLEVBQXJDLEVBQXlDO0FBQ3ZDLFlBQU1DLEVBQUUsR0FBR0gsSUFBSSxDQUFDRSxFQUFELENBQWY7O0FBQ0EsVUFBSSxxQkFBU0wsR0FBVCxDQUFKLEVBQW1CO0FBQ2pCO0FBQ0FBLFFBQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDTSxFQUFELENBQVQ7QUFDRCxPQUhELE1BR087QUFDTE4sUUFBQUEsR0FBRyxHQUFHTyxTQUFOO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJLE9BQU9QLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQixVQUFJLENBQUNKLE1BQUQsSUFBWUksR0FBRCxDQUFnQlEsUUFBaEIsQ0FBeUIsSUFBekIsQ0FBZixFQUErQztBQUM3QyxlQUFPUixHQUFQO0FBQ0QsT0FGRCxNQUVPLElBQUlDLFFBQUosRUFBYztBQUNuQixlQUFPLGdCQUFJRCxHQUFKLENBQVA7QUFDRDs7QUFDRCxhQUFPLGtCQUFNQSxHQUFOLENBQVA7QUFDRDs7QUFDRCxXQUFPLG1CQUFRQSxHQUFSLEVBQWFPLFNBQWIsRUFBd0IsSUFBeEIsRUFBOEJYLE1BQTlCLENBQVA7QUFDRCxHQTdCTSxDQUFQO0FBOEJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHsgaXNPYmplY3QsIHBhZCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHJlZCwgZ3JlZW4gfSBmcm9tICdrbGV1cic7XG5cbmltcG9ydCB7IHdoaXRlIH0gZnJvbSAna2xldXInO1xuaW1wb3J0IHtjYWxjdWxhdGVMZXZlbCwgbGV2ZWxzLCBzdWJzeXN0ZW1zfSBmcm9tIFwiLi9sZXZlbHNcIjtcblxubGV0IExFVkVMX1ZBTFVFX01BWCA9IDA7XG5mb3IgKGNvbnN0IGwgaW4gbGV2ZWxzKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGV2ZWxzLCBsKSkge1xuICAgIExFVkVMX1ZBTFVFX01BWCA9IE1hdGgubWF4KExFVkVMX1ZBTFVFX01BWCwgbC5sZW5ndGgpO1xuICB9XG59XG5cbi8qKlxuICogQXBwbHkgY29sb3JzIHRvIGEgc3RyaW5nIGJhc2VkIG9uIGxldmVsIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0gbXNnXG4gKiBAcGFyYW0geyp9IHRlbXBsYXRlT2JqZWN0c1xuICogQHBhcmFtIHsqfSBoYXNDb2xvcnNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByaW50TWVzc2FnZSh0eXBlLCBtc2csIHRlbXBsYXRlT2JqZWN0cywgaGFzQ29sb3JzKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICB0eXBlID0gY2FsY3VsYXRlTGV2ZWwodHlwZSk7XG4gIH1cblxuICBjb25zdCBmaW5hbE1lc3NhZ2UgPSBmaWxsSW5Nc2dUZW1wbGF0ZShtc2csIHRlbXBsYXRlT2JqZWN0cywgaGFzQ29sb3JzKTtcblxuICBjb25zdCBzdWIgPSBzdWJzeXN0ZW1zW2hhc0NvbG9ycyA/IDAgOiAxXVt0ZW1wbGF0ZU9iamVjdHMuc3ViXSB8fCBzdWJzeXN0ZW1zWyshaGFzQ29sb3JzXS5kZWZhdWx0O1xuICBpZiAoaGFzQ29sb3JzKSB7XG4gICAgcmV0dXJuIGAgJHtsZXZlbHNbdHlwZV0ocGFkKHR5cGUsIExFVkVMX1ZBTFVFX01BWCkpfSR7d2hpdGUoYCR7c3VifSAke2ZpbmFsTWVzc2FnZX1gKX1gO1xuICB9XG4gIHJldHVybiBgICR7cGFkKHR5cGUsIExFVkVMX1ZBTFVFX01BWCl9JHtzdWJ9ICR7ZmluYWxNZXNzYWdlfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxsSW5Nc2dUZW1wbGF0ZShtc2csIG9iajogdW5rbm93biwgY29sb3JzKTogc3RyaW5nIHtcbiAgcmV0dXJuIG1zZy5yZXBsYWNlKC9AeyghP1skQS1aYS16X11bJDAtOUEtWmEtelxcLl9dKil9L2csIChfLCBuYW1lKTogc3RyaW5nID0+IHtcblxuICAgIGxldCBzdHIgPSBvYmo7XG4gICAgbGV0IGlzX2Vycm9yO1xuICAgIGlmIChuYW1lWzBdID09PSAnIScpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxKTtcbiAgICAgIGlzX2Vycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBfcmVmID0gbmFtZS5zcGxpdCgnLicpO1xuICAgIGZvciAobGV0IF9pID0gMDsgX2kgPCBfcmVmLmxlbmd0aDsgX2krKykge1xuICAgICAgY29uc3QgaWQgPSBfcmVmW19pXTtcbiAgICAgIGlmIChpc09iamVjdChzdHIpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc3RyID0gc3RyW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICghY29sb3JzIHx8IChzdHIgYXMgc3RyaW5nKS5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH0gZWxzZSBpZiAoaXNfZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHJlZChzdHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdyZWVuKHN0cik7XG4gICAgfVxuICAgIHJldHVybiBpbnNwZWN0KHN0ciwgdW5kZWZpbmVkLCBudWxsLCBjb2xvcnMpO1xuICB9KTtcbn1cbiJdfQ==