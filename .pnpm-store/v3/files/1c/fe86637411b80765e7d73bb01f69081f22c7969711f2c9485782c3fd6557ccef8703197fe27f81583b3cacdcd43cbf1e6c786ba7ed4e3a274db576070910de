"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _middleware = require("../../middleware");

var _utils = require("../../../lib/utils");

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const downloadStream = (packageName, filename, storage, req, res) => {
  const stream = storage.getTarball(packageName, filename);
  stream.on('content-length', function (content) {
    res.header('Content-Length', content);
  });
  stream.on('error', function (err) {
    return res.report_error(err);
  });
  res.header(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.OCTET_STREAM);
  stream.pipe(res);
};

function _default(route, auth, storage, config) {
  const can = (0, _middleware.allow)(auth); // TODO: anonymous user?

  route.get('/:package/:version?', can('access'), function (req, res, next) {
    const getPackageMetaCallback = function (err, metadata) {
      if (err) {
        return next(err);
      }

      metadata = (0, _utils.convertDistRemoteToLocalTarballUrls)(metadata, req, config.url_prefix);
      let queryVersion = req.params.version;

      if (_lodash.default.isNil(queryVersion)) {
        return next(metadata);
      }

      let version = (0, _utils.getVersion)(metadata, queryVersion);

      if (_lodash.default.isNil(version) === false) {
        return next(version);
      }

      if (_lodash.default.isNil(metadata[_constants.DIST_TAGS]) === false) {
        if (_lodash.default.isNil(metadata[_constants.DIST_TAGS][queryVersion]) === false) {
          queryVersion = metadata[_constants.DIST_TAGS][queryVersion];
          version = (0, _utils.getVersion)(metadata, queryVersion);

          if (_lodash.default.isNil(version) === false) {
            return next(version);
          }
        }
      }

      return next(_utils.ErrorCode.getNotFound(`${_constants.API_ERROR.VERSION_NOT_EXIST}: ${req.params.version}`));
    };

    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: getPackageMetaCallback
    });
  });
  route.get('/:scopedPackage/-/:scope/:filename', can('access'), function (req, res) {
    const {
      scopedPackage,
      filename
    } = req.params;
    downloadStream(scopedPackage, filename, storage, req, res);
  });
  route.get('/:package/-/:filename', can('access'), function (req, res) {
    downloadStream(req.params.package, req.params.filename, storage, req, res);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3BhY2thZ2UudHMiXSwibmFtZXMiOlsiZG93bmxvYWRTdHJlYW0iLCJwYWNrYWdlTmFtZSIsImZpbGVuYW1lIiwic3RvcmFnZSIsInJlcSIsInJlcyIsInN0cmVhbSIsImdldFRhcmJhbGwiLCJvbiIsImNvbnRlbnQiLCJoZWFkZXIiLCJlcnIiLCJyZXBvcnRfZXJyb3IiLCJIRUFERVJTIiwiQ09OVEVOVF9UWVBFIiwiT0NURVRfU1RSRUFNIiwicGlwZSIsInJvdXRlIiwiYXV0aCIsImNvbmZpZyIsImNhbiIsImdldCIsIm5leHQiLCJnZXRQYWNrYWdlTWV0YUNhbGxiYWNrIiwibWV0YWRhdGEiLCJ1cmxfcHJlZml4IiwicXVlcnlWZXJzaW9uIiwicGFyYW1zIiwidmVyc2lvbiIsIl8iLCJpc05pbCIsIkRJU1RfVEFHUyIsIkVycm9yQ29kZSIsImdldE5vdEZvdW5kIiwiQVBJX0VSUk9SIiwiVkVSU0lPTl9OT1RfRVhJU1QiLCJnZXRQYWNrYWdlIiwibmFtZSIsInBhY2thZ2UiLCJ1cGxpbmtzTG9vayIsImNhbGxiYWNrIiwic2NvcGVkUGFja2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBS0EsTUFBTUEsY0FBYyxHQUFHLENBQUNDLFdBQUQsRUFBc0JDLFFBQXRCLEVBQXdDQyxPQUF4QyxFQUFzREMsR0FBdEQsRUFBMkVDLEdBQTNFLEtBQTBHO0FBQy9ILFFBQU1DLE1BQU0sR0FBR0gsT0FBTyxDQUFDSSxVQUFSLENBQW1CTixXQUFuQixFQUFnQ0MsUUFBaEMsQ0FBZjtBQUVBSSxFQUFBQSxNQUFNLENBQUNFLEVBQVAsQ0FBVSxnQkFBVixFQUE0QixVQUFTQyxPQUFULEVBQXdCO0FBQ2xESixJQUFBQSxHQUFHLENBQUNLLE1BQUosQ0FBVyxnQkFBWCxFQUE2QkQsT0FBN0I7QUFDRCxHQUZEO0FBSUFILEVBQUFBLE1BQU0sQ0FBQ0UsRUFBUCxDQUFV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LEVBQWdCdkMsUUFBaEIsRUFBMEJDLE9BQTFCLEVBQW1DQyxHQUFuQyxFQUF3Q0MsR0FBeEMsQ0FBZDtBQUNELEdBSkQ7QUFNQVksRUFBQUEsS0FBSyxDQUFDSSxHQUFOLENBQVUsdUJBQVYsRUFBbUNELEdBQUcsQ0FBQyxRQUFELENBQXRDLEVBQWtELFVBQVNoQixHQUFULEVBQThCQyxHQUE5QixFQUEwRDtBQUMxR0wsSUFBQUEsY0FBYyxDQUFDSSxHQUFHLENBQUN1QixNQUFKLENBQVdXLE9BQVosRUFBcUJsQyxHQUFHLENBQUN1QixNQUFKLENBQVd6QixRQUFoQyxFQUEwQ0MsT0FBMUMsRUFBbURDLEdBQW5ELEVBQXdEQyxHQUF4RCxDQUFkO0FBQ0QsR0FGRDtBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGFsbG93IH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBjb252ZXJ0RGlzdFJlbW90ZVRvTG9jYWxUYXJiYWxsVXJscywgZ2V0VmVyc2lvbiwgRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCB7IEhFQURFUlMsIERJU1RfVEFHUywgQVBJX0VSUk9SIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IENvbmZpZywgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgSUF1dGgsICRSZXNwb25zZUV4dGVuZCwgJFJlcXVlc3RFeHRlbmQsICROZXh0RnVuY3Rpb25WZXIsIElTdG9yYWdlSGFuZGxlciB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcblxuY29uc3QgZG93bmxvYWRTdHJlYW0gPSAocGFja2FnZU5hbWU6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZywgc3RvcmFnZTogYW55LCByZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCk6IHZvaWQgPT4ge1xuICBjb25zdCBzdHJlYW0gPSBzdG9yYWdlLmdldFRhcmJhbGwocGFja2FnZU5hbWUsIGZpbGVuYW1lKTtcblxuICBzdHJlYW0ub24oJ2NvbnRlbnQtbGVuZ3RoJywgZnVuY3Rpb24oY29udGVudCk6IHZvaWQge1xuICAgIHJlcy5oZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgY29udGVudCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpOiB2b2lkIHtcbiAgICByZXR1cm4gcmVzLnJlcG9ydF9lcnJvcihlcnIpO1xuICB9KTtcblxuICByZXMuaGVhZGVyKEhFQURFUlMuQ09OVEVOVF9UWVBFLCBIRUFERVJTLk9DVEVUX1NUUkVBTSk7XG4gIHN0cmVhbS5waXBlKHJlcyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCwgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyLCBjb25maWc6IENvbmZpZyk6IHZvaWQge1xuICBjb25zdCBjYW4gPSBhbGxvdyhhdXRoKTtcbiAgLy8gVE9ETzogYW5vbnltb3VzIHVzZXI/XG4gIHJvdXRlLmdldCgnLzpwYWNrYWdlLzp2ZXJzaW9uPycsIGNhbignYWNjZXNzJyksIGZ1bmN0aW9uKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgY29uc3QgZ2V0UGFja2FnZU1ldGFDYWxsYmFjayA9IGZ1bmN0aW9uKGVyciwgbWV0YWRhdGE6IFBhY2thZ2UpOiB2b2lkIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIG1ldGFkYXRhID0gY29udmVydERpc3RSZW1vdGVUb0xvY2FsVGFyYmFsbFVybHMobWV0YWRhdGEsIHJlcSwgY29uZmlnLnVybF9wcmVmaXgpO1xuXG4gICAgICBsZXQgcXVlcnlWZXJzaW9uID0gcmVxLnBhcmFtcy52ZXJzaW9uO1xuICAgICAgaWYgKF8uaXNOaWwocXVlcnlWZXJzaW9uKSkge1xuICAgICAgICByZXR1cm4gbmV4dChtZXRhZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB2ZXJzaW9uID0gZ2V0VmVyc2lvbihtZXRhZGF0YSwgcXVlcnlWZXJzaW9uKTtcbiAgICAgIGlmIChfLmlzTmlsKHZlcnNpb24pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbmV4dCh2ZXJzaW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF8uaXNOaWwobWV0YWRhdGFbRElTVF9UQUdTXSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChfLmlzTmlsKG1ldGFkYXRhW0RJU1RfVEFHU11bcXVlcnlWZXJzaW9uXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcXVlcnlWZXJzaW9uID0gbWV0YWRhdGFbRElTVF9UQUdTXVtxdWVyeVZlcnNpb25dO1xuICAgICAgICAgIHZlcnNpb24gPSBnZXRWZXJzaW9uKG1ldGFkYXRhLCBxdWVyeVZlcnNpb24pO1xuICAgICAgICAgIGlmIChfLmlzTmlsKHZlcnNpb24pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQodmVyc2lvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Tm90Rm91bmQoYCR7QVBJX0VSUk9SLlZFUlNJT05fTk9UX0VYSVNUfTogJHtyZXEucGFyYW1zLnZlcnNpb259YCkpO1xuICAgIH07XG5cbiAgICBzdG9yYWdlLmdldFBhY2thZ2Uoe1xuICAgICAgbmFtZTogcmVxLnBhcmFtcy5wYWNrYWdlLFxuICAgICAgdXBsaW5rc0xvb2s6IHRydWUsXG4gICAgICByZXEsXG4gICAgICBjYWxsYmFjazogZ2V0UGFja2FnZU1ldGFDYWxsYmFjayxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcm91dGUuZ2V0KCcvOnNjb3BlZFBhY2thZ2UvLS86c2NvcGUvOmZpbGVuYW1lJywgY2FuKCdhY2Nlc3MnKSwgZnVuY3Rpb24ocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQpOiB2b2lkIHtcbiAgICBjb25zdCB7IHNjb3BlZFBhY2thZ2UsIGZpbGVuYW1lIH0gPSByZXEucGFyYW1zO1xuXG4gICAgZG93bmxvYWRTdHJlYW0oc2NvcGVkUGFja2FnZSwgZmlsZW5hbWUsIHN0b3JhZ2UsIHJlcSwgcmVzKTtcbiAgfSk7XG5cbiAgcm91dGUuZ2V0KCcvOnBhY2thZ2UvLS86ZmlsZW5hbWUnLCBjYW4oJ2FjY2VzcycpLCBmdW5jdGlvbihyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCk6IHZvaWQge1xuICAgIGRvd25sb2FkU3RyZWFtKHJlcS5wYXJhbXMucGFja2FnZSwgcmVxLnBhcmFtcy5maWxlbmFtZSwgc3RvcmFnZSwgcmVxLCByZXMpO1xuICB9KTtcbn1cbiJdfQ==